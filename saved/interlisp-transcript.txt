Xerox PARC:Interlisp D Programmers Tools (VPRI 0585)
93 views  May 11, 2022  News Segment re:  Auricle Auricle Demonstration



0:13
I must be is a personal computing environment have a number of mystics
0:22
perhaps the most salient is the presence in the user's office of machine itself
0:28
zip rocks don't these machines typically
0:33
eyes in color or a small cabinet tend to sit in one corner of the ball hey boys
0:41
and for that reason that are increasingly now mounted remotely not
0:48
this particular machine is usually mounted remote except Asians like have
0:55
it photographed to compensate for the very individualistic nature of everybody having a machine of their own the
1:02
machines are all linked together using some kind of people in this case it's
1:07
the Xerox three megahertz research Ethernet work and using that ethernet work I can reach out and access letís to
1:15
this in my office things like shared file servers shared printers and the
1:21
consoles of my friends and colleagues the consoles themselves are distinctive
1:27
a conventional keyboard they have a high resolution bitmap display which allows
1:34
the use of very flexible graphics and presenting information to the user in addition to the display they have a
1:41
plane device or a mouse which by sensing horizontal motion on the table point on
1:46
the software object on the screen the combination very flexible input and
1:54
output devices and the steady supply of computing guaranteed by the dedicated computer allows the style of interaction
2:00
which is quite different from what one is used to go to time to get environment it's much more reactive and has a much
2:06
higher bandwidth through the user and one of the key problems and personal computing has been to develop techniques
2:11
which exploit this power techniques such as window menus from graphic simulations
2:18
icons are all different ways to harness ha
2:24
as a result were you system like this what one is the techniques that have
2:31
been used to communicate this information the pictures that are being drawn and for endless deep that's a very
2:38
sad misperception because in addition to being a computer personal computing environment university is also in a list
2:45
an illness is a programming environment and language which has developed over the last 10 years on large time shared
2:52
machines like PDB tens during the course this development in addition to standard
2:57
paraphernalia of a modern computing language it's also developed a very extensive collection of programming
3:03
tools these tools and size of the collection can be best judged by size the utilized okya ments them have been
3:10
proven to be very useful when people who try to deal with very large programs that they're having it almost too large
3:16
them to understand and control the kinds of tools that are provided at things like knowledge-based program analysis
3:21
automatic maintenance of databases about files programs and where they belong automatic error correction and
3:28
programmers assistance now the real challenge of it all is d for us was therefore to marry this this rich
3:35
tradition that came out of the time shared environment with the specification power flexibility of
3:41
personal computer and what we're going to show you in this demonstration is the current state of the marriage between
3:47
these two different traditions unfortunately since we'll be demonstrating a programming environment
3:53
we're going to have to choose a very small scale example in order to fit the example in a time that would be
3:58
reasonable to ask you to watch that's unfortunate because the real value of these tools is generally in coping with
4:04
very large problems and to work through a large or a real problem in this time would simply not be feasible on the
4:12
other hand we hope to tell that the facilities will show you will give you a flavor for the kind of environment has
4:17
come to the marriage of the two different traditions and how the they both contribute in their own way to
4:22
simplifying a programming process we are now looking at the screen of a
4:28
Xerox 1132 running into SD as you can see the screen into a number of recce
4:35
the windows he provides a view on to a particular piece of data or activity the
4:43
graphical representations used in the different windows vary considerably including text in a variety of different
4:49
fonts synthetic images composed by the user straight and curved lines of a
4:55
variety of types drawn by the system and photographic images this delicious
5:02
Center riot was generated by electronically threshold in a scanned in black-and-white photograph a variety of
5:09
other techniques are available including hot Tony for images with gray scale in the like this one in addition the
5:18
multi-bit four-point facilities of these machines can be used to generate real grayscale images or even color
5:24
photographs on an appropriately equipped asst blooding there are a variety of
5:31
different processes running in the system and some of them are visible on the screen the most salient is this one
5:38
in the bottom right hand corner in which the top personally when it has nothing
5:45
else to do further up on the top right there's a time of day clock which is
5:52
updated continuously during the user session finally over on the far left is
5:58
a traditional read eval print I script window into which the user types expressions which are evaluated in their
6:04
values printed we're going to begin their investigation of the analyst
6:10
deprogramming tools by running a small program which is part of linguistics
6:16
program the Xerox research this particular small program you I ran
6:26
this edit reprogram on the value of the variable pause the system prompted me with a square to give us space probe
6:34
when I press down the mouse button the system indicates how much ah dition on
6:41
the screen when I do so the system will take that space and put in that window
6:48
aid no graphically pleasing representation of power structure for
6:53
what turns out to be the English sentence my uncle story about the war will bore you to tears in this window
7:00
the various nodes that represent modes of the power structure active when I fight them with the mouse they lock on
7:06
to the mouse and can be moved around allowing the user to rearrange the layout of the tree on the screen in
7:13
addition using a menu which comes up on this particular window I can add or delete links or nodes so it's changing
7:21
the structure in this case to add a link between the noun phrase and preposition node when I do so those links like the
7:27
other ones I moved around when I move around the nose in order to understand
7:34
how this particular the first thing is to interrupt process to moving it what I
7:45
do that by hitting the interest no one in which i have the facilities to look
7:52
around and explore the dynamic state of my computation the first thing that I need to know is how I got here I can
7:59
obtain that information by bringing up a menu of brake package commands in this case i want the back-trace come on which
8:06
will open that indicates context happens to be
8:11
we can see here that starting at the top level actually that cold vs from
8:18
underneath the read about print loop give this program a lot of followed
8:25
cursor move nose and underneath the pool
8:31
I can look at the status of any one of these particular programs by pointing at it using the mouse and when I do so the
8:38
system will open up another window on top of the break typescript window into which will put the information has about
8:45
the particular stack frame that I pointed out in this case I'm asking it about the staff frame there's a function
8:54
that potions name appears here is arguments in D&D s down the left-hand
9:00
side and their values over here on the right and the Roku variable in this case only one called old paws cold Paws is
9:08
fairly clearly an XY coordinate pair but these two values of here are instances
9:14
of interest for the data type packed representations of data are not easily
9:21
interpretable in this thing to look at them anymore d and select them using the
9:26
mouse and then inspect them by running the inspector program on these you open
9:32
up a window in which the system input a more readable representation of this
9:38
particular L know this case we have the fields of that particular datatype
9:44
spread down the left-hand side and their values in this particular instance or raid on the rhine some of them like
9:51
these numbers or positions here are very easy for one to interpret others like ya
9:58
are less clear from this particular representation we can look at them however in some more detail by
10:05
inspecting them in turn in this case when I asked to inspect that particular value the system offers me a choice of
10:11
looking either at it feels information like how wide or high it is or its contents the actual bits themselves
10:19
to do so I do that the system opens up
10:24
in the center of the screen a big map editor window the bit map editor window gives me a large view of that particular
10:31
image which I can change now by adding new bits or turning them on we're taking
10:37
bits out including them are in this way I can basically manipulate this image in
10:43
a very convenient form while system continues in the top left-hand corner to show me what that image would really
10:49
look like real size we're not finished adjusting it to my whatever desire I
10:56
have I can go up and use menu in the top of the window what to do was it changed
11:04
in can do a variety of different things like the free example every way I could
11:11
put it back where I found it this particular case I'm just going to quit out of the bit map editor without actually having changed anything because
11:18
I'm not sure whether this program was capable of adapting to a bitmap the changes underneath its execution in
11:26
addition to being able to browse using data structures like these ones I can also browse the system data structures
11:31
here for example I can select this choose a font descriptor a font
11:38
descriptor that uses two parents all characters with written on the screen
11:45
this cases has a large variety of fields not all of what you're immediately obvious but some like the front style
11:52
its size and the face style to be used are relatively easy to interpret and
11:57
this provides the user useful information about the system data structures that affect the way is program is operating using these tools
12:05
the user can in fact explore through both his own data structures and the systems data structures and its dynamic
12:11
state to get a very good model of exactly how the program happens to be operating in any particular time when
12:18
you're finished looking at something like this by bringing up the series of break commands again I can quit out of
12:24
this particular pause and just resumed the program as if nothing had happened what I do
12:31
that you can see that the break windows disappear if I go back surround and this
12:40
is if my break it never happened do I do
12:45
this I'll you observed something about this program that's a little bit anomalous they are nerve this node
12:50
higher than the node that's been linked to you can see here that the line is still being drawn from the bottom of the
12:57
source node to the top of the destination node even in the destination that is higher than the source node but
13:03
I will explain if the destination that is law you can see the drawing through
13:09
the label producing this very unpleasing graphical effect this is the kind of
13:14
snow change the one left find oneself having to make encode that one didn't write himself in order to use it for
13:19
example if one decided to use this system to layout arbitrary lattices rather than just trees to make this
13:26
change what we're going to do is to interrupt the system again and start exploring its static rather than its
13:32
dynamic properties cumulus provides a variety of tools to do this based on the
13:37
master scope databases which contain a complete static analysis of a user's code in this particular case I'm going
13:45
to begin my exploration by asking a system to show me little pods of calling
13:50
relationships starting off with the function edit tree which is how I entered this subsystem using the
13:57
information in the database the system to build such a quorum graph representation and display it to me
14:06
where I do that you can see that in this very compact representation because
14:11
these trees can get to be very big the system is displayed the OP call three
14:20
functions is subsystem tree way out and see for a variety of other functions are
14:28
so forth all the way across showing a complete map of the entire system
14:34
indication know that appear in more than one place in the graph possibly because
14:40
they any stage killer representation
14:47
function names like this one here I do the system will access code ensure this
14:56
case down to the bottom right the system will open up a window into which she is going to go and obtain the source code
15:02
from the file server and display it to me the source code notice the system
15:12
didn't actually coded it was compiled code in order to get to consult a little
15:22
bit things about for every compile function whereabouts the source code
15:27
belongs in this case when the Fire Water Resource followed knows not on this
15:34
justice local machine police in an episode of time this tool by looking
15:43
inside the file bottomless fuses which is a file on a directory on the local Passover
15:50
using this particular one can Walker first up picking up pieces of code of
16:00
works that's fine if one has a fairly general set of understandings in mind in
16:06
this case however we need some more specific going back script window this
16:14
specific crash who calls the drawer is
16:22
the system one bro and Paul's it we can
16:28
start narrowing in on who it is that might be drawing those lines incorrectly
16:35
in this case we're told the only function that calls link will be able to
16:44
make a change that should affect the way the case the width was to the browser
16:52
window I'm the function show link is right beside it was a different mouse
16:59
button I can instruct the system to find its source code but rather than just showing it to me to roll it in so that I
17:07
redefine interchange come back the
17:15
system will gray out the coring structure window to indicate that that
17:21
particular coin structures there longer to be trusted since show link has been redefined and will open up a window an
17:28
editing window into which that code will appear in this window I can point us a
17:35
structure like you are Adam or this list but it's not a character oriented editor
17:41
one out here is not something I can point out with the mouse
17:49
over series of commands and this continually active which I'm currently
17:56
pointing out and makes that change this
18:06
particular case you do is between
18:11
expression which is what surely does Queen something first I'll given us a
18:18
second fine expression which is conditional on the relative positions of
18:24
the two arguments to generate that conditional I actually have to type it in where I first hit the keys the system
18:32
opens every door window underneath the Edit window in which my keystrokes are collected the particular keystrokes I
18:39
have in mind are the expression with the prom notice above the two node then
18:45
basically I'm content with things to where they are so I'll use this place market I mean it's okay as it is
18:51
otherwise it's not okay as it is but it's very nearly okay so i'll start off with the same thing in both arms of the
18:57
conditional simply by going over to the Edit menu and buttoning your place I can
19:03
replace that drill between with a conditional expression now they're both arms the conditional are still the same
19:10
they're both copies what was there before in order to switch around with our undrawn on the bottom or the top in
19:16
the case where the farm node is not above the two node I'm going to take these farm piles and to pause fields and
19:22
switch them and now I have a new piece of code that more reflects what I have
19:27
in mind I'm not going to exit from this editor and when I do so i'll be back
19:33
inside the break typescript window and the far right-hand side the system has told me for example that it is unsaved
19:40
the definition of chill link to reflect the changes that I've just made and from now on out showing will be running is
19:46
interpreted rather than compiled code I still have the version of entry that I
19:52
was running suspended behind me but I can go right back into it and see whether my change works simply by
19:58
releasing this computation with the okay come on well I do so I can move back over here
20:04
into the editor window point this node and try and move it when I do something
20:10
remarkable happens first of all the node went away the first step in moving it
20:16
but nothing else happened and the reason for that can be seen in the typescript window immediately above the Edit tree
20:22
the system has found inside the function show link the name frd which it doesn't
20:29
know anything about it knows that's an error but furthermore in addition knowing that it's an error it looks
20:35
around in the immediate context and uses its knowledge of list programs to figure out that that's probably a typographical
20:41
mistake for the atom frm d which is one of the arguments to show link the system
20:48
wouldn't make that change by itself because it may be wrong but is proposing this to me as a storm direction that it
20:53
should make inside my code when I tell us that I wanted to go ahead and make
20:59
that change for me automatically a number of things will happen at once firstly the Edit window you saw here
21:05
grayed out because the changes been made in the code and the system knows that that code is represented in that window
21:10
and doesn't want me to look at that window and have an incorrect idea of what the system could occur actually
21:16
says because it's just been changed then the system proceeded with the computation out having made this bearing
21:22
correction and ran into an error which calls this window pops crib to come up again in for this break window in
21:30
particular I'm broken inside the function above I can see how I got here
21:35
but I bring up another back trace and you can see here that I'm underneath the function show link having just called a
21:42
function above now I can find out what the arguments are after the function above by bringing up the break room menu
21:50
again and pressing that command at the bottom the system then tells me that a
21:56
problem expects to arguments position one in position two and they're currently bound to these two L knows now
22:03
that makes my error obviously immediately above was expecting positions which was going to compute a
22:09
coordinate relationship between instead it was given ailments so our mistake was
22:14
that I called above all nodes rather than extracting the physicians from them directly this is obviously a mistake I
22:21
made in the change that I made ensuring a second mistake I can go and actually
22:26
correct that by asking the system to run the editor again on the function show link this time invoked using the by
22:35
typing in the Edit command directly this will bring up a the window again the
22:42
window has been cleared and you can see in here the system has repainted it to take account of the fact that this typo
22:49
i made has now been corrected I have to correct it again however this problem it
22:55
shouldn't be the note itself it should be a position now there are a variety of ways of extracting a physician from out
23:01
of a node luckily draw between also takes positions as arguments so this
23:06
expression here will extract a position from this particular prom node so that
23:11
would in fact be a reasonable thing to use instead so I'll replace that followed by a call on front position of
23:18
prom nerd likewise to node I'm going to extract the analogous thing using this
23:24
call on prime position and that's in fact very much more like what I want having corrected that error and now go
23:31
over to the edit operations and exit wounds particular code on the editor and when I do so that's going to put me back
23:38
in the right typescript here bear in mind that all the time I've been doing
23:43
this that the suspended broken computation is still sitting there underneath me waiting to be resumed that
23:51
fact you can see the status that computation here it turns out that everything was fine up until this point
23:57
it's showing where the mistake was made so what I could do now is having changed shoaling will be to back out as that
24:05
particular call to show link using the reverb command and then restart it will
24:11
the change definition of the code that I've just finished making in the editor this can be done by writing the
24:17
computation proceed with the ok command what I do coming back to the Edit tree
24:22
window you'll find that when I start moving this NP node now you'll see that everything still works fine I've got the
24:29
old behavior back at least now when I move it higher than the prepositional phrase node you can see here that the
24:36
link is jumping where I grew up on top is going from the top to the bottom when I go below it's going from the bottom of
24:42
the top which is exactly the behavior that I wanted to have Chris stage having
24:48
successfully made this change I can quit leaving this core on edit reef or the first time since we first began this
24:55
demonstration and ask the system where the state of my files is I've made it several different changes the system is
25:02
kept track of those and so it's capable of knowing that all those particular
25:07
changes were in the function show link that function belongs in the file lata sir and therefore Lasser is the only
25:13
file it needs to be updated this information is maintained automatically so this stage I can basically save all
25:21
the changes I've made and rebuild my role to a clean state by simply typing clean up it's in fact this kind of
25:27
bookkeeping that the interest d system provides that provides programming tools that increase the programmers
25:33
productivity
